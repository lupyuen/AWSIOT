[
    {
        "id": "9d2915ef.f48b98",
        "type": "tab",
        "label": "IoT Roadmap"
    },
    {
        "id": "fbe6b929.b91aa8",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b9ba5876.098478",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "c686ea3a.788a38",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "804ac77a.de1298",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "33370f0f.fe62b",
        "disp": true,
        "width": "6"
    },
    {
        "id": "33370f0f.fe62b",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "d43b49d1.d53e48",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "🔻 MACRO LEVEL",
        "info": "",
        "x": 1430,
        "y": 640,
        "wires": []
    },
    {
        "id": "d68f00c5.2ef8a",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Device",
        "info": "",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "91e8471f.5d9098",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Setup",
        "info": "",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "599226c4.d8cd38",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Loop",
        "info": "",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "409349be.cc7628",
        "type": "inject",
        "z": "9d2915ef.f48b98",
        "name": "send every 10 sec",
        "topic": "",
        "payload": "simulated_sensor_data",
        "payloadType": "flow",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "80b6b9af.8b1718"
            ]
        ]
    },
    {
        "id": "1093dcb2.18e233",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Transmit",
        "info": "",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "c32a5012.14bf3",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "IoT Gateway",
        "info": "",
        "x": 590,
        "y": 80,
        "wires": []
    },
    {
        "id": "1760ac49.1dfdc4",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Rule Engine",
        "info": "",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "ca3b14ed.62f328",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Alerts",
        "info": "",
        "x": 1290,
        "y": 380,
        "wires": []
    },
    {
        "id": "22febad5.a68166",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Dashboard",
        "info": "",
        "x": 1300,
        "y": 540,
        "wires": []
    },
    {
        "id": "bbb31dbb.bcf6f",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Sensor",
        "info": "",
        "x": 50,
        "y": 80,
        "wires": []
    },
    {
        "id": "33bbad1.367b052",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Sensor Data Store",
        "info": "- Preferably a Time Series Database like InfluxDB\n- MySQL works fine for low data volume",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "79a667a.65e5e98",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "IoT Analytics",
        "info": "",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "f6a39fdb.a3926",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "IoT Machine Learning",
        "info": "",
        "x": 1100,
        "y": 640,
        "wires": []
    },
    {
        "id": "14f1c7bf.0f4748",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Deep IoT",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "e2e0f034.4a82a",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Wide IoT",
        "info": "",
        "x": 280,
        "y": 640,
        "wires": []
    },
    {
        "id": "ade752c8.a966a",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Mobile App",
        "info": "",
        "x": 620,
        "y": 640,
        "wires": []
    },
    {
        "id": "2fbe2f3f.d01ea",
        "type": "e-mail",
        "z": "9d2915ef.f48b98",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "name": "",
        "dname": "send email",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "5e2e0c46.c8f1c4",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Physical Device State",
        "info": "",
        "x": 1220,
        "y": 80,
        "wires": []
    },
    {
        "id": "1cf4d41f.ff794c",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Logical Device State",
        "info": "",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "f465eea7.6883b",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "transmit",
        "func": "//  Initiate a transmission flow.\n\n//  Cycle though ring and dot icons, across various colors.\nvar fillSequence = ['green', 'green', 'yellow', 'yellow', 'blue', 'blue', 'grey', 'grey']\nvar shapeSequence = ['ring', 'dot'];\nvar sequence = flow.get('display-sequence') || 0;\nvar fill = fillSequence[sequence % fillSequence.length];\nvar shape = shapeSequence[sequence % shapeSequence.length];\nflow.set('display-fill', fill);\nflow.set('display-shape', shape);\nflow.set('display-sequence', sequence + 1);\n\n//  Initialise the logical device state.\n//  Get the logical device state from the flow context.\nvar last_logical_device_state = flow.get('last_logical_device_state');\n//  If the state is missing, store an empty state in the flow context.\nif (!last_logical_device_state) {\n    flow.set('last_logical_device_state', {});\n}\n\n//  Display the received payload.\nnode.status({\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload, null, 2)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the message with no changes.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "82681e7.89bf8e"
            ]
        ]
    },
    {
        "id": "82681e7.89bf8e",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "convert to json",
        "func": "//  Construct a JSON payload containing the \n//  timestamp and sensor data.\nvar result = {\n    //  We will be returning a payload\n    //  instead of a top-level object.\n    payload: {\n        //  \"timestamp\" is number of milliseconds elapsed \n        //  since 1 Jan 1970 00:00:00 UTC.\n        timestamp: Date.now(),\n        \n        //  \"lig\" is the light level, e.g. 500.\n        lig: msg.payload\n    }\n};\n\n//  Display the received payload.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    //  Convert the payload to JSON.\n    text: JSON.stringify(result.payload)\n});\n\n//  Return the new message.\nreturn result;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 120,
        "wires": [
            [
                "2b027d8d.c43ef2",
                "108ae332.c7de6d",
                "e114ea0e.287c58"
            ]
        ]
    },
    {
        "id": "caa41fa.37f9fe",
        "type": "gpio in",
        "z": "9d2915ef.f48b98",
        "name": "Light Sensor (A0)",
        "state": "ANALOG",
        "samplingInterval": "10000",
        "pin": "0",
        "board": "c686ea3a.788a38",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "996e2dcc.8556",
                "e595df83.79ce3"
            ]
        ]
    },
    {
        "id": "b2a68ab1.ca9ee8",
        "type": "gpio out",
        "z": "9d2915ef.f48b98",
        "name": "LED (D13)",
        "state": "OUTPUT",
        "pin": "13",
        "i2cDelay": "0",
        "i2cAddress": "",
        "i2cRegister": "",
        "outputs": 0,
        "board": "c686ea3a.788a38",
        "x": 450,
        "y": 560,
        "wires": []
    },
    {
        "id": "996e2dcc.8556",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "toggle output on input",
        "func": "// Invert the level that is stored in the context.\n// (context variables persist between calls to the function)\ncontext.level = !context.level || false;\n\n// Set the payload to the level and return.\nmsg.payload = context.level;\n\n//  Display the payload.\nnode.status({\n    text: 'Output is ' + JSON.stringify(msg.payload)\n});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "b2a68ab1.ca9ee8"
            ]
        ]
    },
    {
        "id": "c5c38a46.6d4878",
        "type": "ui_chart",
        "z": "9d2915ef.f48b98",
        "name": "",
        "group": "804ac77a.de1298",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 1310,
        "y": 580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6f110284.85282c",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "◀️ HARDWARE",
        "info": "",
        "x": 80,
        "y": 20,
        "wires": []
    },
    {
        "id": "1b94655e.115f1b",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "SOFTWARE ▶️",
        "info": "",
        "x": 1260,
        "y": 20,
        "wires": []
    },
    {
        "id": "7f2ed1dd.cac4b",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "🔺 MICRO LEVEL",
        "info": "",
        "x": 1450,
        "y": 80,
        "wires": []
    },
    {
        "id": "722009dd.53fe88",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "save physical device state",
        "func": "//  Save the physical device state into memory.\nflow.set('last_physical_device_state', msg.payload);\n\n//  Display the physical device state saved.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Saved state ' + JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "b44a81a0.d447c"
            ]
        ]
    },
    {
        "id": "2b027d8d.c43ef2",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "display",
        "func": "//  Display the payload.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload, null, 2)\n});\n\n//  Pass through the message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 120,
        "wires": [
            [
                "722009dd.53fe88"
            ]
        ]
    },
    {
        "id": "8307f126.aa0a",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "save logical device state",
        "func": "//  Inject the timestamp if there was no timestamp.\n//  If there was a saved state, inject the previous\n//  fields that were not changed.\nmsg.payload = Object.assign(\n    //  Object.assign will merge the following\n    //  items in the sequence below.\n    {},\n    flow.get('last_logical_device_state'),\n    { timestamp: Date.now() },\n    msg.payload\n);\n\n//  Save the logical device state into memory.\nflow.set('last_logical_device_state', msg.payload);\n\n//  Display the logical device state saved.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Saved state ' + JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 220,
        "wires": [
            [
                "cc6fd8dd.1d0338"
            ]
        ]
    },
    {
        "id": "7845ad34.523924",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Simulated Sensor",
        "info": "",
        "x": 100,
        "y": 120,
        "wires": []
    },
    {
        "id": "39369149.650c6e",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Arduino Sensor",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "9c6fe13c.58074",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "current physical device state",
        "func": "//  Display the physical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 520,
        "wires": [
            [
                "b822bd5f.3519c"
            ]
        ]
    },
    {
        "id": "b822bd5f.3519c",
        "type": "file",
        "z": "9d2915ef.f48b98",
        "name": "",
        "filename": "physical-device-state.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1110,
        "y": 520,
        "wires": []
    },
    {
        "id": "687313a1.a589ac",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "current logical device state",
        "func": "//  Display the logical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 580,
        "wires": [
            [
                "7ad288c8.6f7708",
                "c5c38a46.6d4878"
            ]
        ]
    },
    {
        "id": "7ad288c8.6f7708",
        "type": "file",
        "z": "9d2915ef.f48b98",
        "name": "",
        "filename": "logical-device-state.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "b44a81a0.d447c",
        "type": "link out",
        "z": "9d2915ef.f48b98",
        "name": "Physical Device State",
        "links": [
            "2e0e0de0.142ff2"
        ],
        "x": 1415,
        "y": 120,
        "wires": []
    },
    {
        "id": "2e0e0de0.142ff2",
        "type": "link in",
        "z": "9d2915ef.f48b98",
        "name": "Physical Device State",
        "links": [
            "b44a81a0.d447c"
        ],
        "x": 675,
        "y": 520,
        "wires": [
            [
                "9c6fe13c.58074"
            ]
        ]
    },
    {
        "id": "8aa6b5a0.598178",
        "type": "link in",
        "z": "9d2915ef.f48b98",
        "name": "Logical Device State",
        "links": [
            "cc6fd8dd.1d0338"
        ],
        "x": 675,
        "y": 580,
        "wires": [
            [
                "687313a1.a589ac"
            ]
        ]
    },
    {
        "id": "cc6fd8dd.1d0338",
        "type": "link out",
        "z": "9d2915ef.f48b98",
        "name": "Logical Device State",
        "links": [
            "8aa6b5a0.598178"
        ],
        "x": 1515,
        "y": 220,
        "wires": []
    },
    {
        "id": "cdf53f0b.9b681",
        "type": "inject",
        "z": "9d2915ef.f48b98",
        "name": "every 10 sec",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 820,
        "y": 360,
        "wires": [
            [
                "d94f9568.2832f8"
            ]
        ]
    },
    {
        "id": "be2ba970.ab5c18",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "display",
        "func": "//  Get the last logical device state.\nvar logical_device_state = flow.get('last_logical_device_state');\n\n//  Display the logical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(logical_device_state)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Return the logicla device state.\nreturn {\n    payload: logical_device_state\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1310,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a264179a.d5c478",
        "type": "inject",
        "z": "9d2915ef.f48b98",
        "name": "light level = 500",
        "topic": "",
        "payload": "500",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "ea3f8dfb.1ada4"
            ]
        ]
    },
    {
        "id": "ea3f8dfb.1ada4",
        "type": "change",
        "z": "9d2915ef.f48b98",
        "name": "mock sensor",
        "rules": [
            {
                "t": "set",
                "p": "simulated_sensor_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d5d122d2.2c8a4",
        "type": "inject",
        "z": "9d2915ef.f48b98",
        "name": "light level = 0",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "ea3f8dfb.1ada4"
            ]
        ]
    },
    {
        "id": "1092c4b6.0f3f7b",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Setup",
        "info": "",
        "x": 210,
        "y": 420,
        "wires": []
    },
    {
        "id": "248c5637.162ada",
        "type": "comment",
        "z": "9d2915ef.f48b98",
        "name": "Loop",
        "info": "",
        "x": 210,
        "y": 460,
        "wires": []
    },
    {
        "id": "5706fc83.1cbec4",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_detected to false'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d1cf7641.dca368",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_detected to true'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a682bd5c.ca4b8",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "456b6cd2.6e6f74",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "3a741b28.4d27d4",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_off_timestamp to current time'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8917aaac.0bf608",
        "type": "change",
        "z": "9d2915ef.f48b98",
        "name": "light is on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"light_detected\": true }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 200,
        "wires": [
            [
                "8307f126.aa0a"
            ]
        ]
    },
    {
        "id": "ecd800c2.b7e04",
        "type": "change",
        "z": "9d2915ef.f48b98",
        "name": "light is off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"light_detected\": false }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 240,
        "wires": [
            [
                "6acb6035.1e7e",
                "a682bd5c.ca4b8"
            ]
        ]
    },
    {
        "id": "6acb6035.1e7e",
        "type": "switch",
        "z": "9d2915ef.f48b98",
        "name": "has light changed?",
        "property": "payload.light_detected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "last_logical_device_state.light_detected",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "9274f654.5a0db8",
                "456b6cd2.6e6f74"
            ],
            [
                "9d62d9b6.749f08",
                "3a741b28.4d27d4"
            ]
        ]
    },
    {
        "id": "9274f654.5a0db8",
        "type": "change",
        "z": "9d2915ef.f48b98",
        "name": "unchanged",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "8307f126.aa0a"
            ]
        ]
    },
    {
        "id": "9d62d9b6.749f08",
        "type": "change",
        "z": "9d2915ef.f48b98",
        "name": "from on to off",
        "rules": [
            {
                "t": "set",
                "p": "payload.light_off_timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "8307f126.aa0a"
            ]
        ]
    },
    {
        "id": "c2e7688c.b1d588",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a3202902.0aa358",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "5c2d0d0e.b84ad4",
        "type": "switch",
        "z": "9d2915ef.f48b98",
        "name": "if light is off",
        "property": "last_logical_device_state.light_detected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "35875f11.49abc",
                "a3202902.0aa358"
            ],
            []
        ]
    },
    {
        "id": "35875f11.49abc",
        "type": "switch",
        "z": "9d2915ef.f48b98",
        "name": "if off for >= 30 secs",
        "property": "last_logical_device_state.light_off_duration",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gte",
                "v": "30000",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "be2ba970.ab5c18",
                "2fbe2f3f.d01ea"
            ],
            []
        ]
    },
    {
        "id": "e114ea0e.287c58",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "108ae332.c7de6d",
        "type": "switch",
        "z": "9d2915ef.f48b98",
        "name": "is light on?",
        "property": "payload.lig",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "500",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 810,
        "y": 180,
        "wires": [
            [
                "8917aaac.0bf608",
                "d1cf7641.dca368"
            ],
            [
                "ecd800c2.b7e04",
                "5706fc83.1cbec4"
            ]
        ]
    },
    {
        "id": "d94f9568.2832f8",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "compute light off duration",
        "func": "//  Compute how long the light has been off\n//  and store in the logical device state.\n\n//  Get the logical device state from the flow context.\nvar last_logical_device_state = flow.get('last_logical_device_state');\nif (!last_logical_device_state) return msg;  //  Quit if no state.\n\n//  Get the light off timestamp.\nvar light_off_timestamp = last_logical_device_state.light_off_timestamp;\nif (!light_off_timestamp) return msg;  //  Quit if no timestamp.\n\n//  Compute the time diff in milliseconds and \n//  store in the state.\nvar light_off_duration = Date.now() - light_off_timestamp;\nlast_logical_device_state = Object.assign(\n    //  Object.assign will merge the following objects\n    //  in the order below.\n    {},\n    last_logical_device_state,\n    { light_off_duration: light_off_duration }\n);\n\n//  Display the time diff.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Set light_off_duration to ' + light_off_duration + ' millisec'\n});\n\n//  Store the state in the flow context.\nflow.set('last_logical_device_state', last_logical_device_state);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 420,
        "wires": [
            [
                "c2e7688c.b1d588",
                "5c2d0d0e.b84ad4"
            ]
        ]
    },
    {
        "id": "80b6b9af.8b1718",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "connect to \"transmit\"",
        "func": "//  Display the received payload.\nnode.status({\n    text: 'Sensor value is ' + JSON.stringify(msg.payload)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "f465eea7.6883b"
            ]
        ]
    },
    {
        "id": "e595df83.79ce3",
        "type": "function",
        "z": "9d2915ef.f48b98",
        "name": "connect to \"transmit\"",
        "func": "//  Display the received payload.\nnode.status({\n    text: 'Sensor value is ' + JSON.stringify(msg.payload)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 500,
        "wires": [
            []
        ]
    }
]
