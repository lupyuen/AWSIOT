[
    {
        "id": "b7d8e22.e9be92",
        "type": "tab",
        "label": "IoT Roadmap"
    },
    {
        "id": "fbe6b929.b91aa8",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b9ba5876.098478",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "c686ea3a.788a38",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "804ac77a.de1298",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "33370f0f.fe62b",
        "disp": true,
        "width": "6"
    },
    {
        "id": "33370f0f.fe62b",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "e6c3e312.b4639",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "🔻 MACRO LEVEL",
        "info": "",
        "x": 1430,
        "y": 640,
        "wires": []
    },
    {
        "id": "f331c34c.390ac",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Device",
        "info": "- The components here represent a real IoT device\n  (e.g. Arduino Uno) or a simulated IoT device.\n\n- We organise the components here according to the \n  Arduino programming convention\n\n- All Arduino programs start execution at the `setup()` \n  function. The `setup()` function is called once\n  to perform any device or sensor initialisation.\n\n- When using a Sigfox shield with Arduino, we\n  normally initialise the Sigfox module in the `setup()` function.\n  Some Sigfox modules include a Power Amplifier\n  and may need some time to power up.\n\n- The `loop()` function is called repeatedly\n  to allow the Arduino program to perform any required\n  tasks.  A typical `loop()` function will:\n\n0. Read data from a sensor.\n1. Process the data read. Possibly encode to save space.\n2. Transmit the data e.g. over Sigfox. \n3. Delay a few seconds before restarting the loop\n\n-  The Sigfox shield will not allow two transmissions within 10 seconds.\n   So it's a good practice to insert a delay of 10 seconds at \n   the end of the `loop()` function.\n",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "d38c8e78.d4244",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Setup",
        "info": "",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd48b031.5411b",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Loop",
        "info": "",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "cf775e3b.4deab",
        "type": "inject",
        "z": "b7d8e22.e9be92",
        "name": "send every 10 sec",
        "topic": "",
        "payload": "simulated_sensor_data",
        "payloadType": "flow",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "3a47d138.7002ae"
            ]
        ]
    },
    {
        "id": "e799bebd.409cd",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Transmit",
        "info": "",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "d3cfa666.eed728",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "IoT Gateway",
        "info": "",
        "x": 590,
        "y": 80,
        "wires": []
    },
    {
        "id": "11af386e.1323b8",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Rule Engine",
        "info": "",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "8ef411a0.6164a",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Alerts",
        "info": "",
        "x": 1290,
        "y": 380,
        "wires": []
    },
    {
        "id": "cdf2bba0.c9d948",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Dashboard",
        "info": "",
        "x": 1300,
        "y": 540,
        "wires": []
    },
    {
        "id": "79d18c93.2d4694",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Sensor",
        "info": "",
        "x": 50,
        "y": 80,
        "wires": []
    },
    {
        "id": "4ca114bf.590e6c",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Sensor Data Store",
        "info": "- Preferably a Time Series Database like InfluxDB\n- MySQL works fine for low data volume",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "6cff84a3.ff0fec",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "IoT Analytics",
        "info": "",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "4539163a.629818",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "IoT Machine Learning",
        "info": "",
        "x": 1100,
        "y": 640,
        "wires": []
    },
    {
        "id": "2b6c3868.c01ec8",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Deep IoT",
        "info": "",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "1e4e639.5dce59c",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Wide IoT",
        "info": "",
        "x": 280,
        "y": 640,
        "wires": []
    },
    {
        "id": "e4a115e2.587bd8",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Mobile App",
        "info": "",
        "x": 620,
        "y": 640,
        "wires": []
    },
    {
        "id": "7ab2fd37.385004",
        "type": "e-mail",
        "z": "b7d8e22.e9be92",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "name": "",
        "dname": "send email",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "7ef2d234.b071bc",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Physical Device State",
        "info": "",
        "x": 1220,
        "y": 80,
        "wires": []
    },
    {
        "id": "db98704e.f30c1",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Logical Device State",
        "info": "",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "5e4fadff.b028c4",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "transmit",
        "func": "//  Initiate a transmission flow.\n\n//  Cycle though ring and dot icons, across various colors.\nvar fillSequence = ['green', 'green', 'yellow', 'yellow', 'blue', 'blue', 'grey', 'grey']\nvar shapeSequence = ['ring', 'dot'];\nvar sequence = flow.get('display-sequence') || 0;\nvar fill = fillSequence[sequence % fillSequence.length];\nvar shape = shapeSequence[sequence % shapeSequence.length];\nflow.set('display-fill', fill);\nflow.set('display-shape', shape);\nflow.set('display-sequence', sequence + 1);\n\n//  Initialise the logical device state.\n//  Get the logical device state from the flow context.\nvar last_logical_device_state = flow.get('last_logical_device_state');\n//  If the state is missing, store an empty state in the flow context.\nif (!last_logical_device_state) {\n    flow.set('last_logical_device_state', {});\n}\n\n//  Display the received payload.\nnode.status({\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload, null, 2)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the message with no changes.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "f096e53.b086c18"
            ]
        ]
    },
    {
        "id": "f096e53.b086c18",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "convert to json",
        "func": "//  Construct a JSON payload containing the \n//  timestamp and sensor data.\nvar result = {\n    //  We will be returning a payload\n    //  instead of a top-level object.\n    payload: {\n        //  \"timestamp\" is number of milliseconds elapsed \n        //  since 1 Jan 1970 00:00:00 UTC.\n        timestamp: Date.now(),\n        \n        //  \"lig\" is the light level, e.g. 500.\n        lig: msg.payload\n    }\n};\n\n//  Display the received payload.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    //  Convert the payload to JSON.\n    text: JSON.stringify(result.payload)\n});\n\n//  Return the new message.\nreturn result;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 120,
        "wires": [
            [
                "420dbd1e.9776a4",
                "ae273e45.63c08",
                "4f74e350.a7af4c"
            ]
        ]
    },
    {
        "id": "c25e050.e6e59f8",
        "type": "gpio in",
        "z": "b7d8e22.e9be92",
        "name": "Light Sensor (A0)",
        "state": "ANALOG",
        "samplingInterval": "10000",
        "pin": "0",
        "board": "c686ea3a.788a38",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "52aafc28.a51e54",
                "feb7ce60.2f20f"
            ]
        ]
    },
    {
        "id": "c6754405.55c568",
        "type": "gpio out",
        "z": "b7d8e22.e9be92",
        "name": "LED (D13)",
        "state": "OUTPUT",
        "pin": "13",
        "i2cDelay": "0",
        "i2cAddress": "",
        "i2cRegister": "",
        "outputs": 0,
        "board": "c686ea3a.788a38",
        "x": 450,
        "y": 560,
        "wires": []
    },
    {
        "id": "52aafc28.a51e54",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "toggle output on input",
        "func": "// Invert the level that is stored in the context.\n// (context variables persist between calls to the function)\ncontext.level = !context.level || false;\n\n// Set the payload to the level and return.\nmsg.payload = context.level;\n\n//  Display the payload.\nnode.status({\n    text: 'Output is ' + JSON.stringify(msg.payload)\n});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "c6754405.55c568"
            ]
        ]
    },
    {
        "id": "560b359b.ec257c",
        "type": "ui_chart",
        "z": "b7d8e22.e9be92",
        "name": "",
        "group": "804ac77a.de1298",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 1310,
        "y": 580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "11331b1c.7b2795",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "◀️ HARDWARE",
        "info": "",
        "x": 80,
        "y": 20,
        "wires": []
    },
    {
        "id": "608e173e.866128",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "SOFTWARE ▶️",
        "info": "",
        "x": 1260,
        "y": 20,
        "wires": []
    },
    {
        "id": "39e02e27.f9e0f2",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "🔺 MICRO LEVEL",
        "info": "",
        "x": 1450,
        "y": 80,
        "wires": []
    },
    {
        "id": "e77e5ce8.90a7e",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "save physical device state",
        "func": "//  Save the physical device state into memory.\nflow.set('last_physical_device_state', msg.payload);\n\n//  Display the physical device state saved.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Saved state ' + JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "94c7b72b.a3a348"
            ]
        ]
    },
    {
        "id": "420dbd1e.9776a4",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "display",
        "func": "//  Display the payload.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload, null, 2)\n});\n\n//  Pass through the message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 120,
        "wires": [
            [
                "e77e5ce8.90a7e"
            ]
        ]
    },
    {
        "id": "64d773e2.e4837c",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "save logical device state",
        "func": "//  Inject the timestamp if there was no timestamp.\n//  If there was a saved state, inject the previous\n//  fields that were not changed.\nmsg.payload = Object.assign(\n    //  Object.assign will merge the following\n    //  items in the sequence below.\n    {},\n    flow.get('last_logical_device_state'),\n    { timestamp: Date.now() },\n    msg.payload\n);\n\n//  Save the logical device state into memory.\nflow.set('last_logical_device_state', msg.payload);\n\n//  Display the logical device state saved.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Saved state ' + JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 220,
        "wires": [
            [
                "355beb38.1887c4"
            ]
        ]
    },
    {
        "id": "682d5ce9.2e95b4",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Simulated Sensor",
        "info": "",
        "x": 100,
        "y": 120,
        "wires": []
    },
    {
        "id": "9bc3972c.4b0468",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Arduino Sensor",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "2e720007.5f7c3",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "current physical device state",
        "func": "//  Display the physical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 520,
        "wires": [
            [
                "e0257a94.64adf8"
            ]
        ]
    },
    {
        "id": "e0257a94.64adf8",
        "type": "file",
        "z": "b7d8e22.e9be92",
        "name": "",
        "filename": "physical-device-state.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1110,
        "y": 520,
        "wires": []
    },
    {
        "id": "1b3618ab.1ba517",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "current logical device state",
        "func": "//  Display the logical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 580,
        "wires": [
            [
                "1a32b3c0.ff928c",
                "560b359b.ec257c"
            ]
        ]
    },
    {
        "id": "1a32b3c0.ff928c",
        "type": "file",
        "z": "b7d8e22.e9be92",
        "name": "",
        "filename": "logical-device-state.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "94c7b72b.a3a348",
        "type": "link out",
        "z": "b7d8e22.e9be92",
        "name": "Physical Device State",
        "links": [
            "228f9d53.502e52"
        ],
        "x": 1415,
        "y": 120,
        "wires": []
    },
    {
        "id": "228f9d53.502e52",
        "type": "link in",
        "z": "b7d8e22.e9be92",
        "name": "Physical Device State",
        "links": [
            "94c7b72b.a3a348"
        ],
        "x": 675,
        "y": 520,
        "wires": [
            [
                "2e720007.5f7c3"
            ]
        ]
    },
    {
        "id": "e6c5ecfd.f8d94",
        "type": "link in",
        "z": "b7d8e22.e9be92",
        "name": "Logical Device State",
        "links": [
            "355beb38.1887c4"
        ],
        "x": 675,
        "y": 580,
        "wires": [
            [
                "1b3618ab.1ba517"
            ]
        ]
    },
    {
        "id": "355beb38.1887c4",
        "type": "link out",
        "z": "b7d8e22.e9be92",
        "name": "Logical Device State",
        "links": [
            "e6c5ecfd.f8d94"
        ],
        "x": 1515,
        "y": 220,
        "wires": []
    },
    {
        "id": "39242c5c.0a7a54",
        "type": "inject",
        "z": "b7d8e22.e9be92",
        "name": "every 10 sec",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 820,
        "y": 360,
        "wires": [
            [
                "875c2669.c48c58"
            ]
        ]
    },
    {
        "id": "7f2ec510.0e100c",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "display",
        "func": "//  Get the last logical device state.\nvar logical_device_state = flow.get('last_logical_device_state');\n\n//  Display the logical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(logical_device_state)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Return the logicla device state.\nreturn {\n    payload: logical_device_state\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1310,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "253c604b.09283",
        "type": "inject",
        "z": "b7d8e22.e9be92",
        "name": "light level = 500",
        "topic": "",
        "payload": "500",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "e271a780.f44b58"
            ]
        ]
    },
    {
        "id": "e271a780.f44b58",
        "type": "change",
        "z": "b7d8e22.e9be92",
        "name": "mock sensor",
        "rules": [
            {
                "t": "set",
                "p": "simulated_sensor_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e3155c3d.74f4c",
        "type": "inject",
        "z": "b7d8e22.e9be92",
        "name": "light level = 0",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "e271a780.f44b58"
            ]
        ]
    },
    {
        "id": "79206d0a.ed46d4",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Setup",
        "info": "",
        "x": 210,
        "y": 420,
        "wires": []
    },
    {
        "id": "73112835.352528",
        "type": "comment",
        "z": "b7d8e22.e9be92",
        "name": "Loop",
        "info": "",
        "x": 210,
        "y": 460,
        "wires": []
    },
    {
        "id": "9559d4b3.fab198",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_detected to false'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "dba08a79.ca88c8",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_detected to true'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ffde137a.99fa",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6026df85.19e4e",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "93d29421.2a88d8",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_off_timestamp to current time'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "50157fc3.478c",
        "type": "change",
        "z": "b7d8e22.e9be92",
        "name": "light is on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"light_detected\": true }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 200,
        "wires": [
            [
                "64d773e2.e4837c"
            ]
        ]
    },
    {
        "id": "ac1cc85e.729138",
        "type": "change",
        "z": "b7d8e22.e9be92",
        "name": "light is off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"light_detected\": false }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 240,
        "wires": [
            [
                "eaed8d1a.60332",
                "ffde137a.99fa"
            ]
        ]
    },
    {
        "id": "eaed8d1a.60332",
        "type": "switch",
        "z": "b7d8e22.e9be92",
        "name": "has light changed?",
        "property": "payload.light_detected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "last_logical_device_state.light_detected",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "f7c2228e.a61dc",
                "6026df85.19e4e"
            ],
            [
                "f8123e27.c6afb",
                "93d29421.2a88d8"
            ]
        ]
    },
    {
        "id": "f7c2228e.a61dc",
        "type": "change",
        "z": "b7d8e22.e9be92",
        "name": "unchanged",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "64d773e2.e4837c"
            ]
        ]
    },
    {
        "id": "f8123e27.c6afb",
        "type": "change",
        "z": "b7d8e22.e9be92",
        "name": "from on to off",
        "rules": [
            {
                "t": "set",
                "p": "payload.light_off_timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "64d773e2.e4837c"
            ]
        ]
    },
    {
        "id": "c664ec59.c1ca3",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "4235cae5.fef444",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "940bb0cf.e467c",
        "type": "switch",
        "z": "b7d8e22.e9be92",
        "name": "if light is off",
        "property": "last_logical_device_state.light_detected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "76986876.f4b3d8",
                "4235cae5.fef444"
            ],
            []
        ]
    },
    {
        "id": "76986876.f4b3d8",
        "type": "switch",
        "z": "b7d8e22.e9be92",
        "name": "if off for >= 30 secs",
        "property": "last_logical_device_state.light_off_duration",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gte",
                "v": "30000",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "7f2ec510.0e100c",
                "7ab2fd37.385004"
            ],
            []
        ]
    },
    {
        "id": "4f74e350.a7af4c",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ae273e45.63c08",
        "type": "switch",
        "z": "b7d8e22.e9be92",
        "name": "is light on?",
        "property": "payload.lig",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "500",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 810,
        "y": 180,
        "wires": [
            [
                "50157fc3.478c",
                "dba08a79.ca88c8"
            ],
            [
                "ac1cc85e.729138",
                "9559d4b3.fab198"
            ]
        ]
    },
    {
        "id": "875c2669.c48c58",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "compute light off duration",
        "func": "//  Compute how long the light has been off\n//  and store in the logical device state.\n\n//  Get the logical device state from the flow context.\nvar last_logical_device_state = flow.get('last_logical_device_state');\nif (!last_logical_device_state) return msg;  //  Quit if no state.\n\n//  Get the light off timestamp.\nvar light_off_timestamp = last_logical_device_state.light_off_timestamp;\nif (!light_off_timestamp) return msg;  //  Quit if no timestamp.\n\n//  Compute the time diff in milliseconds and \n//  store in the state.\nvar light_off_duration = Date.now() - light_off_timestamp;\nlast_logical_device_state = Object.assign(\n    //  Object.assign will merge the following objects\n    //  in the order below.\n    {},\n    last_logical_device_state,\n    { light_off_duration: light_off_duration }\n);\n\n//  Display the time diff.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Set light_off_duration to ' + light_off_duration + ' millisec'\n});\n\n//  Store the state in the flow context.\nflow.set('last_logical_device_state', last_logical_device_state);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 420,
        "wires": [
            [
                "c664ec59.c1ca3",
                "940bb0cf.e467c"
            ]
        ]
    },
    {
        "id": "3a47d138.7002ae",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "connect to \"transmit\"",
        "func": "//  Display the received payload.\nnode.status({\n    text: 'Sensor value is ' + JSON.stringify(msg.payload)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "5e4fadff.b028c4"
            ]
        ]
    },
    {
        "id": "feb7ce60.2f20f",
        "type": "function",
        "z": "b7d8e22.e9be92",
        "name": "connect to \"transmit\"",
        "func": "//  Display the received payload.\nnode.status({\n    text: 'Sensor value is ' + JSON.stringify(msg.payload)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 500,
        "wires": [
            []
        ]
    }
]
