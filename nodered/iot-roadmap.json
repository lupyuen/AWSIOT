[
    {
        "id": "d93ee728.856608",
        "type": "tab",
        "label": "IoT Roadmap"
    },
    {
        "id": "4174cb0.9774634",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9c5ec672.dbb3f8",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "712f4a57.a07534",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "9c5ec672.dbb3f8",
        "disp": true,
        "width": "6"
    },
    {
        "id": "bb0e7104.8a233",
        "type": "websocket-client",
        "z": "",
        "path": "ws://testcloud.unamakers.com/unabellmwc",
        "wholemsg": "false"
    },
    {
        "id": "40836cc8.af1ea4",
        "type": "ui_group",
        "name": "Group",
        "tab": "9c5ec672.dbb3f8",
        "order": null,
        "disp": true,
        "width": 6
    },
    {
        "id": "ed04753f.4a4078",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3775758e.aa828a",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "9418ed2d.2de7b",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "d1d27d53.414d",
        "disp": true,
        "width": "6"
    },
    {
        "id": "d1d27d53.414d",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "4362e252.65ca3c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e104b9f4.b2bd88",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "66728cda.006db4",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "507ab148.8452f",
        "disp": true,
        "width": "6"
    },
    {
        "id": "507ab148.8452f",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "bf7c60f8.2154c",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "/dev/cu.usbmodem1411",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "b54b41ba.2202f",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5436d2ed.fe470c",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "c08f468f.c11308",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "637a05f1.d0fddc",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "71b3ca2b.6b0174",
        "disp": true,
        "width": "6"
    },
    {
        "id": "71b3ca2b.6b0174",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "8e4fce5.e7e463",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "744f17e2.927548",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "cff671ac.d5a5c",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "30305f9e.ee137",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "4c7b61f7.a2683",
        "disp": true,
        "width": "6"
    },
    {
        "id": "4c7b61f7.a2683",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "906f18be.d1a4a8",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "🔻 MACRO LEVEL",
        "info": "",
        "x": 1430,
        "y": 640,
        "wires": []
    },
    {
        "id": "4f234d60.b81584",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Device",
        "info": "- The components here represent a real IoT device\n  (e.g. Arduino Uno) or a simulated IoT device.\n\n- We organise the components here according to the \n  Arduino programming convention\n\n- All Arduino programs start execution at the `setup()` \n  function. The `setup()` function is called once\n  to perform any device or sensor initialisation.\n\n- When using a Sigfox shield with Arduino, we\n  normally initialise the Sigfox module in the `setup()` function.\n  Some Sigfox modules include a Power Amplifier\n  and may need some time to power up.\n\n- The `loop()` function is called repeatedly\n  to allow the Arduino program to perform any required\n  tasks.  A typical `loop()` function will:\n\n0. Read data from a sensor.\n1. Process the data read. Possibly encode to save space.\n2. Transmit the data e.g. over Sigfox. \n3. Delay a few seconds before restarting the loop\n\n-  The Sigfox shield will not allow two transmissions within 10 seconds.\n   So it's a good practice to insert a delay of 10 seconds at \n   the end of the `loop()` function.\n",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "8e7bcb95.0e7c58",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Setup",
        "info": "",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "4d381620.457818",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Loop",
        "info": "",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "f0e8ce6a.ea734",
        "type": "inject",
        "z": "d93ee728.856608",
        "name": "send every 10 sec",
        "topic": "",
        "payload": "simulated_sensor_data",
        "payloadType": "flow",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 130,
        "y": 320,
        "wires": [
            [
                "43567ef1.ba29e"
            ]
        ]
    },
    {
        "id": "d75c079d.c818a8",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Transmit",
        "info": "",
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "11019a5d.6f26c6",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "IoT Gateway",
        "info": "",
        "x": 590,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2189298.d8221",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Rule Engine",
        "info": "- The **Rule Engine** is the component in the\n  Cloud IoT platform (e.g. AWS IoT, Azure IoT)\n  that executes rules to process any sensor\n  data received.\n\n- Most Cloud IoT platforms support `if ... then ... else ... `\n  kind of rules. A rule could trigger an **alert** \n  (e.g. email, SMS alerts),\n  update a **database** (for rendering dashboards)\n  or execute an **external service** (e.g. predict\n  sensor values based on machine learning)\n\n- In this example the rules update the **Physical\n  and Logical Device States** to record the\n  variables needed for business logic e.g.\n  \"Is the light on?\" \"What time did the light turn off?\"\n",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "11018c64.454a64",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Alerts",
        "info": "- **Alerts** are notifications to a person or to\n  another system, triggered by rules in the **Rule Engine.**\n\n- In **AWS IoT** we will learn to send alerts for\n  **email, SMS and automated voice call.**",
        "x": 1290,
        "y": 380,
        "wires": []
    },
    {
        "id": "d2dffedd.e8636",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Dashboard",
        "info": "",
        "x": 1300,
        "y": 540,
        "wires": []
    },
    {
        "id": "12ab56a4.ba5f89",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Sensor",
        "info": "",
        "x": 50,
        "y": 80,
        "wires": []
    },
    {
        "id": "687429b3.553c58",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Sensor Data Store",
        "info": "- Preferably a Time Series Database like InfluxDB\n- MySQL works fine for low data volume",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "96d11979.fdfa28",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "IoT Analytics",
        "info": "",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "26cdabf5.f88a04",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "IoT Machine Learning",
        "info": "",
        "x": 1100,
        "y": 640,
        "wires": []
    },
    {
        "id": "cf60e886.4a7d88",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Deep IoT",
        "info": "- **Deep IoT** refers to devices that tend\n  to do more processing locally, so the require\n  more network bandwidth, more power\n\n- **Amazon Echo / Alexa** is a good example.\n  It performs some audio processing locally\n  and it uses WiFi to send/receive data.\n  It's not meant to run on battery power.\n\n- This has been the traditional model for\n  IoT: smart, localised devices that have\n  constraints on location, power, network\n  connectivity.\n\n- **Deep IoT** has also been noted to have a\n  higher Total Cost of Ownership because\n  more things can go wrong locally.  Think\n  about a Raspberry Pi and the possibility\n  that its SD card could be corrupted beyond repair.\n  Compare that with an Arduino Uno that has\n  no filesystem.\n\n- In this course we'll focus on a more challenging\n  and impactful class of IoT devices called\n  **Wide IoT** devices that have much fewer\n  constraints on location, power and \n  network connectivity\n",
        "x": 120,
        "y": 640,
        "wires": []
    },
    {
        "id": "ee21686d.44b998",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Wide IoT",
        "info": "- In this course we'll focus on a more challenging\n  and impactful class of IoT devices called\n  **Wide IoT** devices that have much fewer\n  constraints on location, power and \n  network connectivity\n\n- **Wide IoT** devices are designed for\n  widespread deployment. They use \n  **Low Power Wide Area Networks (LPWAN)** like \n  **Sigfox, LoRa, NB-IoT**\n\n- They are designed to run on battery power,\n  up to months and years of battery life.\n  The networks are available city-wide, e.g.\n  most parts of Singapore are already covered\n  by Sigfox.  So the devices will work anywhere\n  without a power outlet.\n\n- The **Arduino Uno with UnaShield Sigfox Shield**\n  makes a good device for **Wide IoT** because\n  it runs on battery power and can transmit\n  sensor data from most areas in Singapore.\n\n- **Wide IoT** devices like the \n  **Arduino Uno with UnaShield** also tend\n  to be lower in cost than **Deep IoT** devices.\n\n- The Total Cost of Ownership of these devices\n  tend to be lower because they have fewer\n  components that may cause problems",
        "x": 280,
        "y": 640,
        "wires": []
    },
    {
        "id": "fae095c3.ddd3e8",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Mobile App",
        "info": "",
        "x": 620,
        "y": 640,
        "wires": []
    },
    {
        "id": "e166fa5a.6643f8",
        "type": "e-mail",
        "z": "d93ee728.856608",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "name": "",
        "dname": "send email",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "d5cdc660.277058",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Physical Device State",
        "info": "-- The **Physical Device State** contains the \n   sensor values before executing any rules\n   in the Rule Engine.\n   \n-- In **AWS IoT** the **Physical Device State** is\n   also known as the **Device Shadow,** because it\n   remembers (shadows) the last known state of the device\n   (e.g. Arduino Uno) and its sensors (e.g. Light Sensor).\n   \n-- In this simulation, the rules in the Rule Engine\n   will read the **Physical Device State** to get the\n   light sensor value and compute whether the light\n   is on (`light_detected = true / false`). \n   `light_detected` is stored in the **Logical Device State.**\n   \n-- In this simulation, the rules in the Rule Engine\n   will read the **Physical Device State** to get the\n   light sensor value and compute whether the light\n   is on.\n   \n-- In this simulation, the **Physical Device State**\n   is stored in a variable named `last_physical_device_state`\n   in the Node-RED flow context.\n",
        "x": 1220,
        "y": 80,
        "wires": []
    },
    {
        "id": "dd540e06.a5811",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Logical Device State",
        "info": "-- The **Logical Device State** contains the \n   sensor values before executing any rules\n   in the Rule Engine.\n   \n-- The rules in the Rule Engine may make use of the\n   **Physical Device State** to derive the\n   **Logical Device State,** which is more\n   business-oriented\n\n-- In this simulation, the rules in the Rule Engine\n   will read the **Physical Device State** to get the\n   light sensor value and compute whether the light\n   is on (`light_detected = true / false`). \n   `light_detected` is stored in the **Logical Device State.**\n\n-- The second set of rules below will read the\n   `light_detected` status from the **Logical Device State**\n   and compute `light_off_timestamp`, `light_off_duration`,\n   which will be stored in the **Logical Device State**\n   \n-- In this simulation, the **Logical Device State**\n   is stored in a variable named `last_logical_device_state`\n   in the Node-RED flow context.\n",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "2a9d048c.f6374c",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "transmit",
        "func": "//  Initiate a transmission flow.\n\n//  Cycle though ring and dot icons, across various colors.\nvar fillSequence = ['green', 'green', 'yellow', 'yellow', 'blue', 'blue', 'grey', 'grey']\nvar shapeSequence = ['ring', 'dot'];\nvar sequence = flow.get('display-sequence') || 0;\nvar fill = fillSequence[sequence % fillSequence.length];\nvar shape = shapeSequence[sequence % shapeSequence.length];\nflow.set('display-fill', fill);\nflow.set('display-shape', shape);\nflow.set('display-sequence', sequence + 1);\n\n//  Initialise the logical device state.\n//  Get the logical device state from the flow context.\nvar last_logical_device_state = flow.get('last_logical_device_state');\n//  If the state is missing, store an empty state in the flow context.\nif (!last_logical_device_state) {\n    flow.set('last_logical_device_state', {});\n}\n\n//  Display the received payload.\nnode.status({\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload, null, 2)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the message with no changes.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "32334b3d.ab8434"
            ]
        ]
    },
    {
        "id": "32334b3d.ab8434",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "convert to json",
        "func": "//  Construct a JSON payload containing the \n//  timestamp and sensor data.\nvar result = {\n    //  We will be returning a payload\n    //  instead of a top-level object.\n    payload: {\n        //  \"timestamp\" is number of milliseconds elapsed \n        //  since 1 Jan 1970 00:00:00 UTC.\n        timestamp: Date.now(),\n        \n        //  \"lig\" is the light level, e.g. 500.\n        lig: msg.payload\n    }\n};\n\n//  Display the received payload.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    //  Convert the payload to JSON.\n    text: JSON.stringify(result.payload)\n});\n\n//  Return the new message.\nreturn result;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 120,
        "wires": [
            [
                "ee839bae.d65e78",
                "c4e00134.4cab6",
                "96feb2b.ce0e75"
            ]
        ]
    },
    {
        "id": "3d926c5c.b93864",
        "type": "gpio in",
        "z": "d93ee728.856608",
        "name": "Light Sensor (A0)",
        "state": "ANALOG",
        "samplingInterval": "10000",
        "pin": "0",
        "board": "c08f468f.c11308",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "882bcfda.6a7b2",
                "d56b49cb.9bb618"
            ]
        ]
    },
    {
        "id": "5bc17527.9c332c",
        "type": "gpio out",
        "z": "d93ee728.856608",
        "name": "LED (D13)",
        "state": "OUTPUT",
        "pin": "13",
        "i2cDelay": "0",
        "i2cAddress": "",
        "i2cRegister": "",
        "outputs": 0,
        "board": "c08f468f.c11308",
        "x": 450,
        "y": 560,
        "wires": []
    },
    {
        "id": "882bcfda.6a7b2",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "toggle output on input",
        "func": "// Invert the level that is stored in the context.\n// (context variables persist between calls to the function)\ncontext.level = !context.level || false;\n\n// Set the payload to the level and return.\nmsg.payload = context.level;\n\n//  Display the payload.\nnode.status({\n    text: 'Output is ' + JSON.stringify(msg.payload)\n});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 260,
        "y": 560,
        "wires": [
            [
                "5bc17527.9c332c"
            ]
        ]
    },
    {
        "id": "815a6d63.834b5",
        "type": "ui_chart",
        "z": "d93ee728.856608",
        "name": "",
        "group": "637a05f1.d0fddc",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "x": 1310,
        "y": 580,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "b938387c.a0da78",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "◀️ HARDWARE",
        "info": "",
        "x": 80,
        "y": 20,
        "wires": []
    },
    {
        "id": "b63284f5.629d38",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "SOFTWARE ▶️",
        "info": "",
        "x": 1260,
        "y": 20,
        "wires": []
    },
    {
        "id": "770bc4e5.9c993c",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "🔺 MICRO LEVEL",
        "info": "",
        "x": 1450,
        "y": 80,
        "wires": []
    },
    {
        "id": "c0a6f5fb.10c758",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "save physical device state",
        "func": "//  Save the physical device state into memory.\nflow.set('last_physical_device_state', msg.payload);\n\n//  Display the physical device state saved.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Saved state ' + JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1260,
        "y": 120,
        "wires": [
            [
                "c099f3b3.768d2"
            ]
        ]
    },
    {
        "id": "ee839bae.d65e78",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "display",
        "func": "//  Display the payload.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload, null, 2)\n});\n\n//  Pass through the message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 120,
        "wires": [
            [
                "c0a6f5fb.10c758"
            ]
        ]
    },
    {
        "id": "9490af6e.43deb",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "save logical device state",
        "func": "//  Inject the timestamp if there was no timestamp.\n//  If there was a saved state, inject the previous\n//  fields that were not changed.\nmsg.payload = Object.assign(\n    //  Object.assign will merge the following\n    //  items in the sequence below.\n    {},\n    flow.get('last_logical_device_state'),\n    { timestamp: Date.now() },\n    msg.payload\n);\n\n//  Save the logical device state into memory.\nflow.set('last_logical_device_state', msg.payload);\n\n//  Display the logical device state saved.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Saved state ' + JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1370,
        "y": 220,
        "wires": [
            [
                "6e7ecbc7.346e94"
            ]
        ]
    },
    {
        "id": "c8462942.1395b8",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Simulated Sensor",
        "info": "",
        "x": 100,
        "y": 120,
        "wires": []
    },
    {
        "id": "d28972c6.526d1",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Arduino Sensor",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "dcc013a0.fb79d",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "current physical device state",
        "func": "//  Display the physical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 520,
        "wires": [
            [
                "2250a2af.5130be"
            ]
        ]
    },
    {
        "id": "2250a2af.5130be",
        "type": "file",
        "z": "d93ee728.856608",
        "name": "",
        "filename": "physical-device-state.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1110,
        "y": 520,
        "wires": []
    },
    {
        "id": "4cceb3f6.57b29c",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "current logical device state",
        "func": "//  Display the logical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(msg.payload)\n});\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 580,
        "wires": [
            [
                "eed5a280.9ca1a",
                "815a6d63.834b5"
            ]
        ]
    },
    {
        "id": "eed5a280.9ca1a",
        "type": "file",
        "z": "d93ee728.856608",
        "name": "",
        "filename": "logical-device-state.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "c099f3b3.768d2",
        "type": "link out",
        "z": "d93ee728.856608",
        "name": "Physical Device State",
        "links": [
            "c5ad8e09.59dc8"
        ],
        "x": 1415,
        "y": 120,
        "wires": []
    },
    {
        "id": "c5ad8e09.59dc8",
        "type": "link in",
        "z": "d93ee728.856608",
        "name": "Physical Device State",
        "links": [
            "c099f3b3.768d2"
        ],
        "x": 675,
        "y": 520,
        "wires": [
            [
                "dcc013a0.fb79d"
            ]
        ]
    },
    {
        "id": "51e94e50.99f64",
        "type": "link in",
        "z": "d93ee728.856608",
        "name": "Logical Device State",
        "links": [
            "6e7ecbc7.346e94"
        ],
        "x": 675,
        "y": 580,
        "wires": [
            [
                "4cceb3f6.57b29c"
            ]
        ]
    },
    {
        "id": "6e7ecbc7.346e94",
        "type": "link out",
        "z": "d93ee728.856608",
        "name": "Logical Device State",
        "links": [
            "51e94e50.99f64"
        ],
        "x": 1515,
        "y": 220,
        "wires": []
    },
    {
        "id": "fee1be46.75346",
        "type": "inject",
        "z": "d93ee728.856608",
        "name": "every 10 sec",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "x": 820,
        "y": 360,
        "wires": [
            [
                "8a82e15e.04d67"
            ]
        ]
    },
    {
        "id": "ebd31930.27ba68",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "display",
        "func": "//  Get the last logical device state.\nvar logical_device_state = flow.get('last_logical_device_state');\n\n//  Display the logical device state.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: JSON.stringify(logical_device_state)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Return the logicla device state.\nreturn {\n    payload: logical_device_state\n};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1310,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "8425cf84.2f80f",
        "type": "inject",
        "z": "d93ee728.856608",
        "name": "light level = 500",
        "topic": "",
        "payload": "500",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "37a1376f.b53958"
            ]
        ]
    },
    {
        "id": "37a1376f.b53958",
        "type": "change",
        "z": "d93ee728.856608",
        "name": "mock sensor",
        "rules": [
            {
                "t": "set",
                "p": "simulated_sensor_data",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "86bec560.3d4a88",
        "type": "inject",
        "z": "d93ee728.856608",
        "name": "light level = 0",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "37a1376f.b53958"
            ]
        ]
    },
    {
        "id": "eec79cc1.c7282",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Setup",
        "info": "",
        "x": 210,
        "y": 420,
        "wires": []
    },
    {
        "id": "c1b064d4.f9f078",
        "type": "comment",
        "z": "d93ee728.856608",
        "name": "Loop",
        "info": "",
        "x": 210,
        "y": 460,
        "wires": []
    },
    {
        "id": "e9a925ce.d9e368",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_detected to false'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "70af646.94d1b9c",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_detected to true'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "e775e78e.139b28",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "94a9cc71.5617b",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "135c2e9.d960ad1",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓ Set light_off_timestamp to current time'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ebcd54fe.f4fd38",
        "type": "change",
        "z": "d93ee728.856608",
        "name": "light is on",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"light_detected\": true }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 200,
        "wires": [
            [
                "9490af6e.43deb"
            ]
        ]
    },
    {
        "id": "29b51481.5e589c",
        "type": "change",
        "z": "d93ee728.856608",
        "name": "light is off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"light_detected\": false }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 240,
        "wires": [
            [
                "b5db4938.ff9158",
                "e775e78e.139b28"
            ]
        ]
    },
    {
        "id": "b5db4938.ff9158",
        "type": "switch",
        "z": "d93ee728.856608",
        "name": "has light changed?",
        "property": "payload.light_detected",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "last_logical_device_state.light_detected",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 950,
        "y": 300,
        "wires": [
            [
                "6f075b41.282c04",
                "94a9cc71.5617b"
            ],
            [
                "42d61ee8.a1ee",
                "135c2e9.d960ad1"
            ]
        ]
    },
    {
        "id": "6f075b41.282c04",
        "type": "change",
        "z": "d93ee728.856608",
        "name": "unchanged",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 260,
        "wires": [
            [
                "9490af6e.43deb"
            ]
        ]
    },
    {
        "id": "42d61ee8.a1ee",
        "type": "change",
        "z": "d93ee728.856608",
        "name": "from on to off",
        "rules": [
            {
                "t": "set",
                "p": "payload.light_off_timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "9490af6e.43deb"
            ]
        ]
    },
    {
        "id": "f07272c0.2a4ed",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "e09ceb6a.304aa8",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1090,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "47bb055b.524fdc",
        "type": "switch",
        "z": "d93ee728.856608",
        "name": "if light is off",
        "property": "last_logical_device_state.light_detected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "de42f4f9.564198",
                "e09ceb6a.304aa8"
            ],
            []
        ]
    },
    {
        "id": "de42f4f9.564198",
        "type": "switch",
        "z": "d93ee728.856608",
        "name": "if off for >= 30 secs",
        "property": "last_logical_device_state.light_off_duration",
        "propertyType": "flow",
        "rules": [
            {
                "t": "gte",
                "v": "30000",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "ebd31930.27ba68",
                "e166fa5a.6643f8"
            ],
            []
        ]
    },
    {
        "id": "96feb2b.ce0e75",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "tick",
        "func": "//  Display a tick.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: '✓'\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "c4e00134.4cab6",
        "type": "switch",
        "z": "d93ee728.856608",
        "name": "is light on?",
        "property": "payload.lig",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "500",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "outputs": 2,
        "x": 810,
        "y": 180,
        "wires": [
            [
                "ebcd54fe.f4fd38",
                "70af646.94d1b9c"
            ],
            [
                "29b51481.5e589c",
                "e9a925ce.d9e368"
            ]
        ]
    },
    {
        "id": "8a82e15e.04d67",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "compute light off duration",
        "func": "//  Compute how long the light has been off\n//  and store in the logical device state.\n\n//  Get the logical device state from the flow context.\nvar last_logical_device_state = flow.get('last_logical_device_state');\nif (!last_logical_device_state) return msg;  //  Quit if no state.\n\n//  Get the light off timestamp.\nvar light_off_timestamp = last_logical_device_state.light_off_timestamp;\nif (!light_off_timestamp) return msg;  //  Quit if no timestamp.\n\n//  Compute the time diff in milliseconds and \n//  store in the state.\nvar light_off_duration = Date.now() - light_off_timestamp;\nlast_logical_device_state = Object.assign(\n    //  Object.assign will merge the following objects\n    //  in the order below.\n    {},\n    last_logical_device_state,\n    { light_off_duration: light_off_duration }\n);\n\n//  Display the time diff.\nnode.status({\n    //  Fill and shape are cycled by the \"transmit\" node.\n    fill: flow.get('display-fill'),\n    shape: flow.get('display-shape'),\n    text: 'Set light_off_duration to ' + light_off_duration + ' millisec'\n});\n\n//  Store the state in the flow context.\nflow.set('last_logical_device_state', last_logical_device_state);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 890,
        "y": 420,
        "wires": [
            [
                "f07272c0.2a4ed",
                "47bb055b.524fdc"
            ]
        ]
    },
    {
        "id": "43567ef1.ba29e",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "connect to \"transmit\"",
        "func": "//  Display the received payload.\nnode.status({\n    text: 'Sensor value is ' + JSON.stringify(msg.payload)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 320,
        "wires": [
            [
                "2a9d048c.f6374c"
            ]
        ]
    },
    {
        "id": "d56b49cb.9bb618",
        "type": "function",
        "z": "d93ee728.856608",
        "name": "connect to \"transmit\"",
        "func": "//  Display the received payload.\nnode.status({\n    text: 'Sensor value is ' + JSON.stringify(msg.payload)\n});\n\n//  Clear the status after 9 seconds.\nsetTimeout(function() {\n    node.status({});\n}, 9000);\n\n//  Pass through the original message.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 500,
        "wires": [
            []
        ]
    }
]
