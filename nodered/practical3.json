[
    {
        "id": "5b03963e.cf84e8",
        "type": "tab",
        "label": "Practical 3 - Sigfox Programming"
    },
    {
        "id": "4174cb0.9774634",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9c5ec672.dbb3f8",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "712f4a57.a07534",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "9c5ec672.dbb3f8",
        "disp": true,
        "width": "6"
    },
    {
        "id": "bb0e7104.8a233",
        "type": "websocket-client",
        "z": "",
        "path": "ws://testcloud.unamakers.com/unabellmwc",
        "wholemsg": "false"
    },
    {
        "id": "40836cc8.af1ea4",
        "type": "ui_group",
        "name": "Group",
        "tab": "9c5ec672.dbb3f8",
        "order": null,
        "disp": true,
        "width": 6
    },
    {
        "id": "ed04753f.4a4078",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3775758e.aa828a",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "9418ed2d.2de7b",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "d1d27d53.414d",
        "disp": true,
        "width": "6"
    },
    {
        "id": "d1d27d53.414d",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "4362e252.65ca3c",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e104b9f4.b2bd88",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "66728cda.006db4",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "507ab148.8452f",
        "disp": true,
        "width": "6"
    },
    {
        "id": "507ab148.8452f",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "bf7c60f8.2154c",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "/dev/cu.usbmodem1421",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "b54b41ba.2202f",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5436d2ed.fe470c",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "637a05f1.d0fddc",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "71b3ca2b.6b0174",
        "disp": true,
        "width": "6"
    },
    {
        "id": "71b3ca2b.6b0174",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "8e4fce5.e7e463",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "744f17e2.927548",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "30305f9e.ee137",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "4c7b61f7.a2683",
        "disp": true,
        "width": "6"
    },
    {
        "id": "4c7b61f7.a2683",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "c1b8a7f0.6aa148",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4ee5908b.b82aa",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "5caca71e.51faa8",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "7989de8f.5dbf4",
        "disp": true,
        "width": "6"
    },
    {
        "id": "7989de8f.5dbf4",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "b37ee01e.d12b6",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "b1935c7b.c8363",
        "disp": true,
        "width": "6"
    },
    {
        "id": "b1935c7b.c8363",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "9928193.f8cf1e8",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "Helvetica Neue",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "Helvetica Neue",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "Helvetica Neue"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                }
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f05e5971.aefcc8",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "f642235f.1992",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "e38f7bc7.395558",
        "disp": true,
        "width": "6"
    },
    {
        "id": "e38f7bc7.395558",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "56687f37.3e7fd",
        "type": "ui_group",
        "z": "",
        "name": "Default",
        "tab": "87bb0a2d.b68838",
        "disp": true,
        "width": "6"
    },
    {
        "id": "87bb0a2d.b68838",
        "type": "ui_tab",
        "name": "Tab",
        "icon": "dashboard",
        "order": 0
    },
    {
        "id": "81797532.3de058",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "e750fc79.c4eaf",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "d0854195.00ebd",
        "type": "nodebot",
        "z": "",
        "name": "",
        "username": "",
        "password": "",
        "boardType": "firmata",
        "serialportName": "COM4",
        "connectionType": "local",
        "mqttServer": "",
        "socketServer": "",
        "pubTopic": "",
        "subTopic": "",
        "tcpHost": "",
        "tcpPort": "",
        "sparkId": "",
        "sparkToken": "",
        "beanId": "",
        "impId": "",
        "meshbluServer": "https://meshblu.octoblu.com",
        "uuid": "",
        "token": "",
        "sendUuid": ""
    },
    {
        "id": "4588053d.4d681c",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Arduino Sketch for sending light sensor data to Sigfox",
        "info": "- Source code for the Arduino sketch:\n  \nhttps://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino\n\n- The code here is very similar to Practical 2,\n  except that the Sigfox parts have been\n  filled in.\n\n- This Arduino sketch reads the sensor data \n  from the Grove light sensor and sends the data\n  to the Sigfox network. \n\n- The sensor value is read every 10 seconds.\n\n- When we write Arduino code, normally we don't\n  write from scratch. We use the code that's\n  provided by the maker of the sensor or\n  communications module (Bluetooth, WiFi, Sigfox etc)\n \n- The Arduino code here was derived from the \n  official sensor specifications and sample code:\n\nhttp://wiki.seeed.cc/Grove-Light_Sensor/\n\nhttps://github.com/Seeed-Studio/Light_Sensor/blob/master/examples/Light_Sensor/Light_Sensor.ino \n\n- Check the above links and compare the\n  similarity of the code\n\n- We will likely be using various Grove sensors \n  for our project because they are easy to connect.\n  Here is the list of Grove sensors available,\n  please choose sensors that are compatible with Arduino:\n\nhttp://wiki.seeed.cc/Grove_System/\n\n- SeeedStudio provides sample Arduino code for Grove Sensors on wiki.seeed.cc, e.g.\n\nhttp://wiki.seeed.cc/Grove-Sound_Sensor/ \n\n- Every Arduino Sketch has 3 sections: **Declarations, Setup, Loop**. Click the nodes to learn more.\n",
        "x": 236,
        "y": 46,
        "wires": []
    },
    {
        "id": "9be0c4d9.07b5c8",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Setup",
        "info": "- Click here\n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L25-L39\n\n- Every Arduino program has a **Setup** function\n  that is run once upon startup.\n\n- We use this section to initialise the sensor\n\n- When using a Sigfox shield with Arduino, we\n  normally initialise the Sigfox module in the `setup()` function.\n  Some Sigfox modules include a Power Amplifier\n  and may need some time to power up.\n\n\n",
        "x": 138,
        "y": 270,
        "wires": []
    },
    {
        "id": "b44938c3.b1ef98",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Loop",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L69-L117\n\n- Every Arduino sketch has a **Loop** function\n  that is run repeatedly after **Setup.**  \n\n- Here we read the sensor value from the Arduino\n  light sensor and display it\n\n- The light sensor should be connected to \n  **Port A0** of the Grove Shield.  This is\n  an **Analog Port,** since the light sensor\n  is an analog sensor.\n\n- The sensor value is read every 10 seconds.\n\n-  When running with a real Sigfox shield,\n   we should insert a delay of 10 seconds \n   at the end of the `loop()` function.\n   We should not send more than 1 message\n   within 10 seconds.\n\n",
        "x": 135,
        "y": 452,
        "wires": []
    },
    {
        "id": "ef17be7.70d4b4",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "General Setup",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L42-L49\n\n- We declare the **Setup** function as `void setup()`.\n  This means it accepts no parameters and \n  returns no values.  In C++, functions start\n  with `{` and end with `}`.\n\n- When we use the **Serial Monitor** we are\n  actually connecting through our computer's\n  COM serial port to the USB interface to\n  another serial port located on the Arduino board.\n  The Arduino's serial port is also known as \n  **UART - Universal Asynchronous Receiver / Transmitter**\n\nhttps://en.wikipedia.org/wiki/Universal_asynchronous_receiver/transmitter\n\n- In most Arduino sketches we use the serial\n  port to display debug messages. That's why\n  the serial port is connected to the\n  Serial Monitor\n\n- By convention, we use 9,600 bits per second\n  to connect to the serial port.  This is set\n  through `Serial.begin(9600)`\n\n- We use `Serial.println` to output messages\n  to the serial port / Serial Monitor.\n  This section will print `Running setup...`\n  when the sketch starts running.\n\n- Why did we call function `F(...)`? Because\n  RAM is severely limited. By calling `F(...)`\n  we store the `Running setup...` string\n  in **Flash Memory** instead of RAM, \n  so we have more usable memory.  \n\n- When you compile a sketch you may see:\n\n```\nSketch uses 19,168 bytes (59%) of program storage space. Maximum is 32,256 bytes.\nGlobal variables use 1,376 bytes (67%) of dynamic memory, leaving 672 bytes for local variables. Maximum is 2,048 bytes.\n```\n\n- That means the Arduino Uno has only **2KB of usuable RAM**.\n  The sketch occupies 19KB of Flash Memory, which is a lot bigger\n  than available RAM.",
        "x": 213,
        "y": 313,
        "wires": []
    },
    {
        "id": "173bee7b.ceb622",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Sensor Setup",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L51-L57\n\n- There is no sensor setup needed for the Grove Light Sensor.\n\n- Some smart sensors (e.g. air pressure sensor)\n  may need some time to start up and warm up.\n\n\n",
        "x": 214,
        "y": 357,
        "wires": []
    },
    {
        "id": "3d20433.578eebc",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Sigfox Module Setup",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L59-L66\n\n- The code here initialises the Sigfox\n  module before transmitting Sigfox messages\n\n- `transceiver.begin()` calls the `begin()`\n  function in the `UnaShieldV1` class.\n  This function powers up the Sigfox module\n  and checks whether it's operational.\n\n- The `begin()` function returns false if the module\n  is not operational.  Hence we check whether\n  the return value is false.\n\n- The `!` operator in C++ is the `not` operator,\n  it changes true to false and vice versa.\n  So when `transceiver.begin()` returns false,\n  `!transceiver.begin()` will return true.\n\n- Hence when `!transceiver.begin()` is true,\n  the module must have failed.  The program\n  stops with a message `Unable to init SIGFOX module...`\n\n- In the C++ convention, all conditions in the\n  `if` statement must be enclosed by brackets:\n\n  `if (condition) statement`\n\n",
        "x": 254,
        "y": 400,
        "wires": []
    },
    {
        "id": "97b41ab0.aee838",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Sensor Loop",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L70-L78\n\n- In this section we read the sensor data.\n\n- `int light_level` declares an Integer variable\n  named `light_level` which we will use\n  to save the sensor value\n\n- `light_level = analogRead(LIGHT_SENSOR)` reads\n  the value of Analog Port 0, i.e. A0.\n  We declared `LIGHT_SENSOR` to be `A0`\n  in the **General Declarations** section\n\n- All C++ statements must end with `;`\n\n- Then we print the `light_level` to the\n  serial port / Serial Monitor\n\n- Why didn't we call `F(...)` for `light_level`?\n  Because `light_level` is a variable and\n  can't be stored in Flash Memory, which is\n  read-only. `F(...)` should be called for\n  text strings that never change.\n\n",
        "x": 212,
        "y": 501,
        "wires": []
    },
    {
        "id": "ed08e4d5.8b90d8",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Sigfox Module Loop",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L80-L112\n\n- This section contains 5 parts of code for\n  sending sensor data via Sigfox:\n\n  1. Declaring the counter variables\n  2. Reading the temperature of the Sigfox module\n  3. Composing a sensor data message\n  4. Sending the message\n  5. Showing the sending status\n\n",
        "x": 254,
        "y": 548,
        "wires": []
    },
    {
        "id": "bf4c2f50.d2cab",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Loop Delay",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L114-L116\n\n- Remember that we are not supposed to send\n  2 Sigfox messages within 10 seconds.  In fact\n  the guideline is that we should only send\n  maximum 140 messages in a day.\n\n- Also we shouldn't read sensors too often. This drains\n  the battery faster.\n\n- By calling `delay(10000)` we introduce a\n  10-second delay into the loop.  We specify\n  10,000 because the unit is milliseconds,\n  so 10 seconds = 10000 milliseconds\n\n- So the program pauses here for 10 seconds\n  before running `loop()` again\n\n- Unlike normal computers, a microcontroller\n  like Arduino doesn't know how to end / exit / quit!\n  It will happily run `loop()` forever\n  until you disconnect the power.\n\n\n",
        "x": 215,
        "y": 808,
        "wires": []
    },
    {
        "id": "ae20e247.22093",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Declarations",
        "info": "- Click to see the section: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L1-L39\n\n- All Arduino programs have a **Declarations** section\n  at the beginning to declare any required\n  library functions or global constants / variables\n\n- An Arduino Sketch is a C++ program, so we\n  use `//` and `/* ... */` to denote comments\n\n",
        "x": 156,
        "y": 94,
        "wires": []
    },
    {
        "id": "f1c0ebfd.336328",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "Sensor Declarations",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L11-L23\n\n- Here we declare any library functions, constants\n  and variables used by the sensor\n\n- The Grove Light Sensor uses the standard\n  Analog port and doesn't require any libraries\n\n- The `#ifdef ... #endif` is a C++ Preprocessor\n  Directive. During the C++ compilation, the\n  C++ compiler checks whether we are compiling\n  for the Bean Arduino Device, and if so\n  use port A2 instead of the default A0 for\n  connecting to the light sensor.  We are\n  using the Arduino Uno, so `LIGHT_SENSOR`\n  will be set to `A0`.\n\n\n",
        "x": 235,
        "y": 173,
        "wires": []
    },
    {
        "id": "57587e17.660c2",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Sigfox Module Declarations",
        "info": "- Click here:\n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L25-L39\n\n- This section declares the library functions, constants\n  and variables needed for the Sigfox transmission\n\n- `#include \"SIGFOX.h\"` is the standard way\n  to tell the Arduino IDE that we will be\n  using the Sigfox library.\n\n- Technically, this command will cause the\n  Arduino compiler to compile the contents\n  of the file `SIGFOX.h` defined in the Sigfox\n  library.  The file `SIGFOX.h` declares\n  the classes (e.g. `UnaShieldV1`) that \n  may be called to execute the Sigfox\n  functions.\n\n- `device` is not used and may be ignored.\n  All messages sent by the Sigfox module will\n  automatically include the Sigfox Device ID.\n  This Device ID is integral to Sigfox security\n  and may not be altered.\n\n- `useEmulator` is set to false because some\n  Sigfox modules allow an emulation mode\n  that enables the module to transmit\n  data locally to a Sigfox emulation basestation,\n  for testing purposes.\n\n- `echo` is set to true so that the library\n  will display debug messages to the Serial Monitor.\n\n- `country` should be set to `Country_SG` for\n  Singapore.  Sigfox devices operate in different\n  frequencies for 4 zones, this configures the\n  library to use Zone 4 for Singapore.\n\n  https://github.com/UnaBiz/unabiz-arduino/wiki/UnaShield\n\n  **Zone 1 (RCZ1):** Europe, South Africa\n\n  **Zone 2 (RCZ2):** North America\n\n  **Zone 3 (RCZ3):** Japan\n\n  **Zone 4 (RCZ4):** Australia, Hong Kong, Singapore, New Zealand, South America, Taiwan\n\n- `transceiver` is the Arduino object that\n  we will use to transmit data.  This is the\n  main object exposed by the Sigfox library\n  to allow data transmission.\n\n- The Sigfox library supports 2 types of\n  Sigfox modules: Radiocrafts (`UnaShieldV1`)\n  and Wisol (`UnaShieldV2S`).  We shall be using\n  the Radiocrafts module and `UnaShieldV1` library.\n\n- For advanced Arduino programmers: `UnaShieldV1` is\n  actually an alias for the `Radiocrafts` class\n  (using a `#define` preprocessor directive).\n  The Sigfox library code may be found here:\n\n  https://github.com/UnaBiz/unabiz-arduino/blob/master/Radiocrafts.cpp\n",
        "x": 274,
        "y": 215,
        "wires": []
    },
    {
        "id": "ff4231b0.f5254",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "General Declarations",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L1-L9\n\n- This is a comment (marked by `//`) that describes the program\n  features. \n\n- The connections for the Arduino Pins is\n  described in Exercise 1",
        "x": 245,
        "y": 133,
        "wires": []
    },
    {
        "id": "799d5edd.ae994",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Declarations",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L83-L85\n\n- Here we declare `counter` as the total number\n  of messages sent\n\n- `successCount` is the actual number of messages\n  sent successfully, i.e. the module didn't\n  return any errors\n\n- `failCount` is the number of messages that\n  returned an error code during sending\n\n- Note that the device won't know the actual number\n  of messages delivered to the Sigfox cloud\n  because the transmission is based on \n  broadcast without acknowledgement.\n\n- Compared with WiFi and 4G, this method of\n  transmission by Sigfox greatly simplifies the\n  device processing needed to send sensor data,\n  and prolongs the battery life of the device.\n\n- It also enables the device to sleep for long\n  periods of time, because it's not expecting\n  to receive any return data.\n\n\n",
        "x": 267,
        "y": 591,
        "wires": []
    },
    {
        "id": "84500edc.f57ef",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Read Sigfox Module temperature",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L87-L88\n\n- The Sigfox module includes a built-in\n  Temperature Sensor that senses its internal\n  temperature.\n\n- Some modules may overheat when we transmit\n  data too frequently.  This sensor is\n  meant for us to detect this condition.\n\n- This is the temperature of the module, not\n  the ambient surroundings. So it can't be used\n  to measure the ambient temperature.\n\n- Calling `transceiver.getTemperature(temperature)`\n  will read the internal temperature sensor and\n  set the `temperature` variable\n\n",
        "x": 337,
        "y": 636,
        "wires": []
    },
    {
        "id": "ea5955de.6c6d98",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Compose structured sensor data message",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L90-L95\n\n- What's a \"structured sensor data message\"?\n  It's possible to send sensor data any way we\n  want in 12 bytes, the maximum message length\n  for Sigfox.\n\n- However we prefer a standard way of sending\n  sensor data whether it's text, integer or\n  floating point (decimal).  The `Message` class\n  in the Sigfox library allows this.\n\n- We also prefer to send the sensor field names.\n  So when the IoT Gateway (e.g. AWS IoT) receives\n  the message, it knows whether it's a light\n  sensor, temperature sensor, sound sensor, etc.\n\n- The `Message` class allows us to send structured\n  sensor data messages that contain the\n  sensor values as well as the field names.\n\n- `Message msg(transceiver)` constructs a new\n  `Message` object\n  that we will use to transmit the sensor data.\n  We pass the `transceiver` object to the `Message`\n  object so that it knows how to transmit the data.\n\n- We call `msg.addField(...)` 3 times to\n  transmit 3 field names and values:\n\n  1. `msg.addField(\"ctr\", counter)` sends the\n    `counter` value with the field name `ctr`.\n    All field names must have 3 letters/digits\n    and in lowercase.  `counter` is the number\n    of messages sent so far.  By sending the\n    message counter, we can track at the\n    IoT Gateway if any messages were lost.\n\n  2. `msg.addField(\"lig\", light_level)` sends\n    the light sensor value as field name\n    `lig`\n\n  3. `msg.addField(\"tmp\", temperature)` sends\n    the module temperature value as field\n    name `tmp`\n\n- This occupies exactly 12 bytes, because\n  4 bytes is used to encode and compress\n  each field name and field value.\n\n- A structured message may contain at most \n  3 fields.\n\n\n",
        "x": 368,
        "y": 680,
        "wires": []
    },
    {
        "id": "d84eb2c3.d99fb",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Send sensor data message",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L97-L103\n\n- `msg.send()` sends the message via the\n  `transceiver` / `UnaShieldV1` object\n\n- This function returns true when sent\n  successfully, false otherwise (e.g. module failure)\n\n- When the function returns true, we increment\n  the count of successful messages:\n\n  `successCount++`\n  \n- Else we increment the count of unsuccessful messages.\n\n  `failCount++`\n  \n- Regardless of success or failure, we always\n  increment the message counter:\n\n  `counter++`\n  \n- To find out how the message is received\n  by our server and recorded into a Google\n  Sheet, you may read this:\n\n  https://github.com/UnaBiz/sigfox-gcloud/blob/master/README.md\n\n  We shall be using AWS IoT instead of Google Cloud,\n  but the concepts and flows are similar.\n",
        "x": 317,
        "y": 722,
        "wires": []
    },
    {
        "id": "fc937da0.8504e",
        "type": "comment",
        "z": "5b03963e.cf84e8",
        "name": "🆕  - Show updates",
        "info": "- Click here: \n  https://github.com/UnaBiz/unabiz-arduino/blob/master/examples/send-light-level/send-light-level.ino#L105-L109\n\n- In this final step we show how many\n  messages were sent successfully and how\n  many failed to send\n\n- `%` is the remainder / modulus operator.\n  When we write `counter % 10` we are \n  computing the remainder of `counter`\n  divided by 10.\n\n- `counter` is incremented every time we send\n  a message, success or fail.  If you think about\n  it, `counter % 10` equals zero after every\n  10 messages.  Hence the status is shown once\n  every 10 messages.\n\n\n",
        "x": 276,
        "y": 764,
        "wires": []
    }
]
